{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","score","fields","querySelectorAll","messageStart","messageWin","messageLose","totalScore","gameStatus","clearFields","forEach","field","textContent","Array","from","classList","className","startsWith","remove","generateRandomField","indexes","length","randomIndex","Math","floor","random","includes","push","randomNumber","index","add","getEmptyFields","filter","addRandomField","emptyFields","moveFieldsUp","i","column","j","value","parseInt","mergedColumn","mergeValues","moveFieldsDown","moveFieldsLeft","row","mergedRow","moveFieldsRight","arr","mergedArr","mergedValue","addEventListener","e","target","key"],"mappings":"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","file":"main.77ad8c38.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst button = document.querySelector('.button');\r\nconst score = document.querySelector('.game-score');\r\nconst fields = document.querySelectorAll('.field-cell');\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageWin = document.querySelector('.message-win');\r\nconst messageLose = document.querySelector('.message-lose');\r\n\r\nlet totalScore = 0;\r\nlet gameStatus = false;\r\n\r\nbutton.addEventListener('click', e => {\r\n  e.target.textContent = 'Restart';\r\n  e.target.classList.remove('start');\r\n  e.target.classList.add('restart');\r\n  messageStart.classList.add('hidden');\r\n  messageWin.classList.add('hidden');\r\n  messageLose.classList.add('hidden');\r\n  score.textContent = 0;\r\n  gameStatus = true;\r\n\r\n  clearFields();\r\n  generateRandomField();\r\n});\r\n\r\nfunction clearFields() {\r\n  fields.forEach(field => {\r\n    field.textContent = '';\r\n\r\n    Array.from(field.classList).forEach(className => {\r\n      if (className.startsWith('field-cell--')) {\r\n        field.classList.remove(className);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction generateRandomField() {\r\n  const indexes = [];\r\n\r\n  while (indexes.length < 2) {\r\n    const randomIndex = Math.floor(Math.random() * fields.length);\r\n\r\n    if (!indexes.includes(randomIndex)) {\r\n      indexes.push(randomIndex);\r\n    }\r\n  }\r\n\r\n  const randomNumber = Math.random() < 0.1 ? 4 : 2;\r\n\r\n  indexes.forEach(index => {\r\n    const field = fields[index];\r\n\r\n    field.textContent = randomNumber;\r\n    field.classList.add('field-cell--' + randomNumber);\r\n  });\r\n}\r\n\r\nfunction getEmptyFields() {\r\n  return Array.from(fields).filter(field => field.textContent === '');\r\n}\r\n\r\nfunction addRandomField() {\r\n  const emptyFields = getEmptyFields();\r\n\r\n  if (emptyFields.length > 0) {\r\n    const randomIndex = Math.floor(Math.random() * emptyFields.length);\r\n    const randomNumber = Math.random() < 0.1 ? 4 : 2;\r\n\r\n    const field = emptyFields[randomIndex];\r\n\r\n    field.textContent = randomNumber;\r\n    field.classList.add('field-cell--' + randomNumber);\r\n  }\r\n}\r\n\r\ndocument.addEventListener('keydown', e => {\r\n  if (!gameStatus) {\r\n    return;\r\n  }\r\n\r\n  const emptyFields = getEmptyFields();\r\n\r\n  if (emptyFields.length === 0) {\r\n    messageLose.classList.remove('hidden');\r\n\r\n    return;\r\n  }\r\n\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n      moveFieldsUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      moveFieldsDown();\r\n      break;\r\n    case 'ArrowLeft':\r\n      moveFieldsLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      moveFieldsRight();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  addRandomField();\r\n\r\n  if (totalScore === 2048) {\r\n    messageWin.classList.remove('hidden');\r\n  }\r\n});\r\n\r\nfunction moveFieldsUp() {\r\n  for (let i = 0; i < 4; i++) {\r\n    const column = [];\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const index = i + j * 4;\r\n      const field = fields[index];\r\n      const value = parseInt(field.textContent);\r\n\r\n      if (value) {\r\n        column.push(value);\r\n      }\r\n    }\r\n\r\n    const mergedColumn = mergeValues(column);\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const index = i + j * 4;\r\n      const field = fields[index];\r\n\r\n      if (j < mergedColumn.length) {\r\n        field.textContent = mergedColumn[j];\r\n        field.className = `field-cell field-cell--${mergedColumn[j]}`;\r\n      } else {\r\n        field.textContent = '';\r\n        field.className = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = totalScore;\r\n}\r\n\r\nfunction moveFieldsDown() {\r\n  for (let i = 0; i < 4; i++) {\r\n    const column = [];\r\n\r\n    for (let j = 3; j >= 0; j--) {\r\n      const index = i + j * 4;\r\n      const field = fields[index];\r\n      const value = parseInt(field.textContent);\r\n\r\n      if (value) {\r\n        column.push(value);\r\n      }\r\n    }\r\n\r\n    const mergedColumn = mergeValues(column);\r\n\r\n    for (let j = 3; j >= 0; j--) {\r\n      const index = i + j * 4;\r\n      const field = fields[index];\r\n\r\n      if (3 - j < mergedColumn.length) {\r\n        field.textContent = mergedColumn[3 - j];\r\n        field.className = `field-cell field-cell--${mergedColumn[3 - j]}`;\r\n      } else {\r\n        field.textContent = '';\r\n        field.className = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = totalScore;\r\n}\r\n\r\nfunction moveFieldsLeft() {\r\n  for (let i = 0; i < 4; i++) {\r\n    const row = [];\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const index = i * 4 + j;\r\n      const field = fields[index];\r\n      const value = parseInt(field.textContent);\r\n\r\n      if (value) {\r\n        row.push(value);\r\n      }\r\n    }\r\n\r\n    const mergedRow = mergeValues(row);\r\n\r\n    for (let j = 0; j < 4; j++) {\r\n      const index = i * 4 + j;\r\n      const field = fields[index];\r\n\r\n      if (j < mergedRow.length) {\r\n        field.textContent = mergedRow[j];\r\n        field.className = `field-cell field-cell--${mergedRow[j]}`;\r\n      } else {\r\n        field.textContent = '';\r\n        field.className = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = totalScore;\r\n}\r\n\r\nfunction moveFieldsRight() {\r\n  for (let i = 0; i < 4; i++) {\r\n    const row = [];\r\n\r\n    for (let j = 3; j >= 0; j--) {\r\n      const index = i * 4 + j;\r\n      const field = fields[index];\r\n      const value = parseInt(field.textContent);\r\n\r\n      if (value) {\r\n        row.push(value);\r\n      }\r\n    }\r\n\r\n    const mergedRow = mergeValues(row);\r\n\r\n    for (let j = 3; j >= 0; j--) {\r\n      const index = i * 4 + j;\r\n      const field = fields[index];\r\n\r\n      if (3 - j < mergedRow.length) {\r\n        field.textContent = mergedRow[3 - j];\r\n        field.className = `field-cell field-cell--${mergedRow[3 - j]}`;\r\n      } else {\r\n        field.textContent = '';\r\n        field.className = 'field-cell';\r\n      }\r\n    }\r\n  }\r\n\r\n  score.textContent = totalScore;\r\n}\r\n\r\nfunction mergeValues(arr) {\r\n  const mergedArr = [];\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i] === arr[i + 1]) {\r\n      const mergedValue = arr[i] + arr[i + 1];\r\n\r\n      totalScore += mergedValue;\r\n\r\n      mergedArr.push(mergedValue);\r\n      i++;\r\n    } else {\r\n      mergedArr.push(arr[i]);\r\n    }\r\n  }\r\n\r\n  return mergedArr;\r\n}\r\n"]}